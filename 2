
FCFS NON PREEMPTIVE


import java.util.Scanner;

class Process {
    int pid, burstTime, arrivalTime, waitingTime, turnaroundTime;

    public Process(int pid, int burstTime, int arrivalTime) {
        this.pid = pid;
        this.burstTime = burstTime;
        this.arrivalTime = arrivalTime;
    }
}

public class FCFS {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter number of processes: ");
        int n = sc.nextInt();
        Process[] processes = new Process[n];
        for (int i = 0; i < n; i++) {
            System.out.print("Enter arrival time and burst time for process " + (i + 1) + ": ");
            int at = sc.nextInt();
            int bt = sc.nextInt();
            processes[i] = new Process(i + 1, bt, at);
        }
        // Sort processes based on arrival time
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (processes[j].arrivalTime > processes[j + 1].arrivalTime) {
                    Process temp = processes[j];
                    processes[j] = processes[j + 1];
                    processes[j + 1] = temp;
                }
            }
        }
        // Calculate waiting time and turnaround time
        int totalTime = 0, totalWT = 0, totalTAT = 0;
        for (Process p : processes) {
            p.waitingTime = totalTime - p.arrivalTime;
            totalTime += p.burstTime;
            p.turnaroundTime = p.waitingTime + p.burstTime;
            totalWT += p.waitingTime;
            totalTAT += p.turnaroundTime;
        }
        // Print Gantt Chart
        System.out.println("Gantt Chart: ");
        for (Process p : processes) {
            System.out.print("P" + p.pid + " ");
        }
        System.out.println("\n");
        // Print process details
        System.out.println("Process\tArrival\tBurst\tWaiting\tTurnaround");
        for (Process p : processes) {
            System.out.println("P" + p.pid + "\t" + p.arrivalTime + "\t" + p.burstTime + "\t" +
                    p.waitingTime + "\t" + p.turnaroundTime);
        }
        System.out.println("Average Waiting Time: " + (totalWT / (float) n));
        System.out.println("Average Turnaround Time: " + (totalTAT / (float) n));
        sc.close();
    }
}







PRIORITY NON PREEMPTIVE

import java.util.Scanner;

class PriorityProcess {
    int pid, burstTime, priority, waitingTime, turnaroundTime;

    public PriorityProcess(int pid, int burstTime, int priority) {
        this.pid = pid;
        this.burstTime = burstTime;
        this.priority = priority;
    }
}

public class PriorityNon {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter number of processes: ");
        int n = sc.nextInt();
        PriorityProcess[] processes = new PriorityProcess[n];
        for (int i = 0; i < n; i++) {
            System.out.print("Enter burst time and priority for process " + (i + 1) + ": ");
            int bt = sc.nextInt();
            int priority = sc.nextInt();
            processes[i] = new PriorityProcess(i + 1, bt, priority);
        }
        // Sort processes by priority (non-preemptive)
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (processes[j].priority > processes[j + 1].priority) {
                    PriorityProcess temp = processes[j];
                    processes[j] = processes[j + 1];
                    processes[j + 1] = temp;
                }
            }
        }
        int totalTime = 0, totalWT = 0, totalTAT = 0;
        for (PriorityProcess p : processes) {
            p.waitingTime = totalTime;
            totalTime += p.burstTime;
            p.turnaroundTime = p.waitingTime + p.burstTime;
            totalWT += p.waitingTime;
            totalTAT += p.turnaroundTime;
        }
        // Print Gantt Chart
        System.out.println("Gantt Chart: ");
        for (PriorityProcess p : processes) {
            System.out.print("P" + p.pid + " ");
        }
        System.out.println("\n");
        // Print process details
        System.out.println("Process\tBurst\tPriority\tWaiting\tTurnaround");
        for (PriorityProcess p : processes) {
            System.out.println("P" + p.pid + "\t" + p.burstTime + "\t" + p.priority + "\t" + p.waitingTime +
                    "\t" + p.turnaroundTime);
        }
        System.out.println("Average Waiting Time: " + (totalWT / (float) n));
        System.out.println("Average Turnaround Time: " + (totalTAT / (float) n));
        sc.close();
    }
}





ROUND ROBIN PREEMPTIVE

import java.util.Scanner;

public class RoundRobin {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter number of processes: ");
        int n = sc.nextInt();
        int[] burstTime = new int[n];
        int[] remainingTime = new int[n];
        int[] waitingTime = new int[n];
        int[] turnaroundTime = new int[n];
        int[] arrivalTime = new int[n];
        System.out.print("Enter time quantum: ");
        int quantum = sc.nextInt();
        for (int i = 0; i < n; i++) {
            System.out.print("Enter arrival time and burst time for process " + (i + 1) + ": ");
            arrivalTime[i] = sc.nextInt();
            burstTime[i] = sc.nextInt();
            remainingTime[i] = burstTime[i];
        }
        int currentTime = 0;
        int completedProcesses = 0;
        String ganttChart = "";
        while (completedProcesses < n) {
            boolean found = false;
            for (int i = 0; i < n; i++) {
                if (remainingTime[i] > 0 && arrivalTime[i] <= currentTime) {
                    found = true;
                    if (remainingTime[i] > quantum) {
                        currentTime += quantum;
                        remainingTime[i] -= quantum;
                        ganttChart += "P" + (i + 1) + " ";
                    } else {
                        currentTime += remainingTime[i];
                        ganttChart += "P" + (i + 1) + " ";
                        waitingTime[i] = currentTime - burstTime[i] - arrivalTime[i];
                        turnaroundTime[i] = waitingTime[i] + burstTime[i];
                        remainingTime[i] = 0;
                        completedProcesses++;
                    }
                }
            }
            if (!found) {
                currentTime++;
                ganttChart += "idle ";
            }
        }
        // Output Gantt Chart
        System.out.println("Gantt Chart: " + ganttChart);
        // Calculate average waiting and turnaround time
        float totalWT = 0, totalTAT = 0;
        System.out.println("Process\tArrival\tBurst\tWaiting\tTurnaround");
        for (int i = 0; i < n; i++) {
            totalWT += waitingTime[i];
            totalTAT += turnaroundTime[i];
            System.out.println("P" + (i + 1) + "\t" + arrivalTime[i] + "\t" + burstTime[i] + "\t" +
                    waitingTime[i] + "\t" + turnaroundTime[i]);
        }
        System.out.println("Average Waiting Time: " + (totalWT / n));
        System.out.println("Average Turnaround Time: " + (totalTAT / n));
        sc.close();
    }
}






SJF PREEMPTIVE

import java.util.Scanner;
public class SJFPreemptive {
public static void main(String[] args) {
Scanner sc = new Scanner(System.in);
System.out.print("Enter the number of processes: ");
int n = sc.nextInt();
int[] bt = new int[n];
int[] at = new int[n];
int[] rt = new int[n];
int[] wt = new int[n];
int[] tat = new int[n];
boolean[] completed = new boolean[n];
System.out.println("Enter Arrival Time and Burst Time of the processes:");
for (int i = 0; i < n; i++) {
System.out.print("P" + (i + 1) + ": ");
at[i] = sc.nextInt();
bt[i] = sc.nextInt();
rt[i] = bt[i]; // remaining time
}
int completedProcesses = 0, currentTime = 0, shortest = 0;
boolean found;
String ganttChart = "";
while (completedProcesses < n) {
found = false;
for (int i = 0; i < n; i++) {
if (!completed[i] && at[i] <= currentTime && (found == false || rt[i] < rt[shortest])) {
shortest = i;
found = true;
}
}
if (found) {
rt[shortest]--;
ganttChart += "P" + (shortest + 1) + " ";
currentTime++;
if (rt[shortest] == 0) {
completed[shortest] = true;
completedProcesses++;
tat[shortest] = currentTime - at[shortest];
wt[shortest] = tat[shortest] - bt[shortest];
}
} else {
currentTime++;
ganttChart += "idle ";
}
}
// Output Gantt Chart
System.out.println("Gantt Chart: " + ganttChart);
// Calculate Average WT and TAT
float avgWT = 0, avgTAT = 0;
System.out.println("Process\tArrival\tBurst\tWaiting\tTurnaround");
for (int i = 0; i < n; i++) {
avgWT += wt[i];
avgTAT += tat[i];
System.out.println("P" + (i + 1) + "\t" + at[i] + "\t" + bt[i] + "\t" + wt[i] + "\t" + tat[i]);
}
avgWT /= n;
avgTAT /= n;
System.out.println("Average Waiting Time: " + avgWT);
System.out.println("Average Turnaround Time: " + avgTAT);
sc.close();
}
}





FIFO PAGE REPLACEMENT

import java.util.*;

public class Fifo {
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        System.out.print("enter number of frames:");
        int numofframes=sc.nextInt();
        System.out.print("enter number of pages:");
        int numofpages=sc.nextInt();
        System.out.print("enter page reference string(space -separated):");
        int [] pagereferencestring=new int[numofpages];
        for (int i=0;i<numofpages;i++){
            pagereferencestring[i]=sc.nextInt();
        } 
        int [] frames=new int[numofframes];
        Arrays.fill(frames,-1);
        int pagefaults=0;
        int currentindex=0;
        for (int page:pagereferencestring){
            boolean pagehit=false;
            for(int frame:frames){
                if(frame==page){
                    pagehit=true;
                    break;
                }
            }
            if(!pagehit){
                frames[currentindex]=page;
                currentindex=(currentindex+1)%numofframes;
                pagefaults++;
            }
            System.out.print("Frames:");
            for(int frame:frames){
                System.out.print(frame + " ");
            }
            System.out.println();
        }
        System.out.println("total page faults:"+pagefaults);
        System.out.println("page fault ratio:"+pagefaults+":"+numofpages);
        sc.close();

    }
    
}






LRU PAGE REPLACEMENT

import java.util.LinkedList;
import java.util.Scanner;

public class lru {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.print("enter number of frames:");
        int numofframes= sc.nextInt();
        System.out.print("enter number of pages:");
        int numofpages= sc.nextInt();
        System.out.print("enter page reference string:");
        int[] pagereferencestring =new int[numofpages];
        for(int i=0;i<numofpages;i++){
            pagereferencestring[i]=sc.nextInt();
        }
        
        LinkedList<Integer> frames = new LinkedList<>();
        int pagefaults=0;
        for(int page:pagereferencestring){
            if(!frames.contains(page)){
                if(frames.size()>=numofframes){
                    frames.removeFirst();
                }
                frames.addLast(page);
                pagefaults++;
            }
            else{
                frames.remove(frames.indexOf(page));
                frames.addLast(page);
            }
            System.out.print("Frames: ");
            for (int frame:frames){
                System.out.print(frame+" ");
            }
            System.out.println();
        }
        System.out.println("total page faults:"+pagefaults);
        sc.close();
    } 
}





OPTIMAL PAGE REPLACEMENT

import java.util.*;

public class optimal {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input: number of frames
        System.out.print("Enter number of frames: ");
        int numFrames = scanner.nextInt();

        // Input: page reference string
        System.out.print("Enter number of pages: ");
        int numPages = scanner.nextInt();
        int[] pageReference = new int[numPages];
        System.out.print("Enter the page reference string: ");
        for (int i = 0; i < numPages; i++) {
            pageReference[i] = scanner.nextInt();
        }

        // Initialize frames with -1 (indicating empty)
        int[] frames = new int[numFrames];
        Arrays.fill(frames, -1);
        int pageFaults = 0;

        // Process each page in the reference string
        for (int i = 0; i < numPages; i++) {
            int currentPage = pageReference[i];
            boolean isPageInFrames = false;

            // Check if page is already in frames
            for (int frame : frames) {
                if (frame == currentPage) {
                    isPageInFrames = true;
                    break;
                }
            }

            // If page is not in frames, replace a page
            if (!isPageInFrames) {
                pageFaults++;

                // Find the frame to replace based on the optimal strategy
                int farthestIndex = -1;
                int indexToReplace = -1;

                for (int j = 0; j < numFrames; j++) {
                    int framePage = frames[j];
                    int nextUse = Integer.MAX_VALUE;  // Assume page not used in future

                    for (int k = i + 1; k < numPages; k++) {
                        if (pageReference[k] == framePage) {
                            nextUse = k;
                            break;
                        }
                    }

                    // Update the frame to replace if it has the farthest use in future
                    if (nextUse > farthestIndex) {
                        farthestIndex = nextUse;
                        indexToReplace = j;
                    }
                }

                // Replace the page in the selected frame
                frames[indexToReplace == -1 ? 0 : indexToReplace] = currentPage;
            }

            // Print the current state of frames
            System.out.print("Frames after inserting page " + currentPage + ": ");
            for (int frame : frames) {
                if (frame == -1) System.out.print("[ ] ");
                else System.out.print("[" + frame + "] ");
            }
            System.out.println();
        }

        System.out.println("Total page faults: " + pageFaults);
        scanner.close();
    }
}
