EXPERIMENT A1

import java.io.*;
import java.util.Scanner;
import java.util.StringTokenizer;
class assemblerPassone {
    static Scanner in = new Scanner(System.in);
    static String is[] = { "STOP","ADD","SUB","MULT","MOVER","MOVEM","COMP","BC","DIV","READ","PRINT"};
    static String ad[] = { "START","END","ORIGIN","EQU","LTORG"};
    static String dl[] = { "DC" , "DS" };
    static String cc[] = { "LT","LE","EQ","GT","GE","ANY"};
    static int symcounter =0 ;
    static int litcounter =0 ;
    static String sym[][] = new String[100][2];
    static String lit[][] = new String[100][2];
    static String ptab[][] = new String[100][2];
    public static void main(String args[]) throws Exception{
        int locate=0;
        int litcount = 0;
        BufferedReader reader = new BufferedReader(new FileReader("input.asm")); //FOR INPUT FILE
        BufferedWriter writer= new BufferedWriter(new FileWriter("intermediate.txt")); //FOR OUTPUT FILE
        BufferedWriter writer1= new BufferedWriter(new FileWriter("SYMTAB.txt")); //FOR SYMBOL TABLE FILE
        BufferedWriter writer2= new BufferedWriter(new FileWriter("LITTAB.txt")); //FOR LITERAL TABLE FILE

        String st;
        String y,prev=null;
        int stp = 0;
        String ans;
        int k = 0;
        String buffer = ""; //FOR INPUT FILE-INTERMEDIATE CODE
        String buffer1 = ""; //FOR SYMBOL TABLE
        String buffer2 = ""; //FOR LITERAL TABLE

        while((st = reader.readLine())!=null){
            int isflag=0;
            k++;
            StringTokenizer splitted = new StringTokenizer(st);
            ans="";
            while(splitted.hasMoreTokens()){
                y = splitted.nextToken();
                if(y.equals("START")){
                    locate = Integer.parseInt(splitted.nextToken());
                    ans="(AD,01)(C,"+locate+")";
                    break;
                }
                else{
                    if(searchis(y)){
                        if(y.equals("STOP")){
                            stp=1;
                        }
                        ans+="(IS,"+Integer.toString(indexis(y))+")";
                        isflag=1;
                        locate+=1;
                    }
                    else if(searchad(y)){
                        if(y.equals("LTORG")){
                            locate+=litcount;
                            ans="(AD,05)\n";
                            while(litcount>0){
                                lit[litcounter-litcount][1] = Integer.toString(locate-litcount);
                                int len=lit[litcounter-litcount][0].length();
                                String temp = lit[litcounter-litcount][0].substring(2,len-1);
                                ans+="(DL,02)(C,"+temp+")";
                                litcount--;
                                if(litcount!=0)
                                    ans+="\n";
                            }
                        }
                        if(y.equals("ORIGIN")){
                            y=splitted.nextToken();
                            String[] words = y.split("\\+");
                            int location = Integer.parseInt(sym[indexsym(words[0])][1]);
                            locate=location+Integer.parseInt(words[1]);
                            ans="(AD,03)(S,"+Integer.toString(indexsym(words[0])+1)+")+"+words[1];
                        }
                        if(y.equals("END") && litcount!=0){
                            locate+=litcount;
                            ans="(AD,02)\n";
                            while(litcount>0){
                                lit[litcounter-litcount][1] = Integer.toString(locate-litcount);
                                int len=lit[litcounter-litcount][0].length();
                                String temp = lit[litcounter-litcount][0].substring(2,len-1);
                                ans+="(DL,02)(C,"+temp+")\n";
                                litcount--;
                                if(litcount!=0)
                                    ans+="\n";
                            }
                        }
                        if(y.equals("EQU")){
                            int temp = indexsym(splitted.nextToken());
                            y=prev;
                            sym[indexsym(y)][1]=  sym[temp][1];
                            ans="";
                        }
                    }
                    else if(searchdl(y)){
                        if(y.equals("DS")){
                            ans="";
                            ans+="(DL,1)(C,"+splitted.nextToken()+")";
                        }
                        if(y.equals("DC")){
                            ans="";
                            ans+="(DL,2)(C,"+splitted.nextToken()+")";
                        }
                        locate+=1;
                    }
                    else{
                        prev=y;
                        char[] x=y.toCharArray();
                        if(x[0]=='='){
                            int z=litcounter;
                            ans+="(L,"+(z+1)+")";
                            lit[litcounter++][0]=y;
                            litcount++;
                        }
                        else if(y.equals("AREG")){
                            ans+="(R,1)";
                        }
                        else if(y.equals("BREG")){
                            ans+="(R,2)";
                        }
                        else if(y.equals("CREG")){
                            ans+="(R,3)";
                        }
                        else if(y.equals("DREG")){
                            ans+="(R,4)";
                        }
                        else if(searchcc(y)){
                            ans+="("+Integer.toString(indexcc(y)+1)+")";
                        }
                        else{
                            if(!searchsym(y) && isflag==0 && stp==0){
                                sym[symcounter][0] = y;
                                sym[symcounter++][1] = Integer.toString(locate);
                                ans+="(S,"+Integer.toString(indexsym(y)+1)+")";
                                if(splitted.hasMoreTokens())
                                    ans="";
                            }
                            else if(!searchsym(y) && isflag==1 && stp==0 ){//if instruction has passed on the line then only add the symbol not the address
                                sym[symcounter++][0] = y;
                                ans+="(S,"+Integer.toString(indexsym(y)+1)+")";
                            }
                            else if(searchsym(y) && isflag==0){
                                sym[indexsym(y)][1]= Integer.toString(locate);
                                ans+="(S,"+Integer.toString(indexsym(y)+1)+")";
                                if(splitted.hasMoreTokens())
                                    ans="";
                                prev=y;
                            }
                            else{
                                if(!splitted.hasMoreTokens())
                                    ans+="(S,"+Integer.toString(indexsym(y)+1)+")";
                                continue;
                            }
                        }
                    }
                }
            }
            ans=ans+"\n";
            buffer+=ans;
        }
        System.out.println(buffer+"\n"); //OUTPUT FILE-INTERMEDIATE CODE

        String ans1 = ""; //SYMBOL TABLE
        for(int i=0;i<symcounter;i++){
            ans1 += sym[i][0]+"\t";
            ans1 += sym[i][1]+"\n";
        }
        buffer1+=ans1;
        System.out.println();

        String ans2 = ""; //LITERAL TABLE
        for(int i=0;i<litcounter;i++){
            ans2 += lit[i][0]+"\t";
            ans2 += lit[i][1]+"\n";
        }
        buffer2+=ans2;
        System.out.println();

        writer.write(buffer);
        writer1.write(buffer1);
        writer2.write(buffer2);

        reader.close();
        writer.close();
        writer1.close();
        writer2.close();
        System.out.println("Program finished................");
    }
    public static boolean searchis(String s){
        boolean flag = false;
        int i=0;
        while(i<11){
            if(is[i].equals(s)){
                flag=true;
                break;
            }
            i++;
        }
        return flag;
    }
    public static boolean searchad(String s){
        boolean flag = false;
        int i=0;
        while(i<5){
            if(ad[i].equals(s)){
                flag=true;
                break;
            }
            i++;
        }
        return flag;
    }
    public static boolean searchdl(String s){
        boolean flag = false;
        int i=0;
        while(i<2){
            if(dl[i].equals(s)){
                flag=true;
                break;
            }
            i++;
        }
        return flag;
    }
    public static boolean searchsym(String s){
        boolean flag = s.equals("BREG") || s.equals("AREG") || s.equals("CREG") || s.equals("DREG") || s.equals(",") ||s.equals("LE") || s.equals("LT") ||s.equals("ANY") ||s.equals("EQ") ||s.equals("GT") ||s.equals("GE");
        int i=0;
        while(i<symcounter ){
            if(sym[i][0].equals(s)){
                flag=true;
                break;
            }
            i++;
        }
        return flag;
    }
    public static boolean searchcc(String s){
        boolean flag = false;
        int i=0;
        while(i<6){
            if(cc[i].equals(s)){
                flag=true;
                break;
            }
            i++;
        }
        return flag;
    }
    public static int indexsym(String s){
        int c = 0;
        int i=0;
        while(i<symcounter){
            if(sym[i][0].equals(s)){
                c=i;
                break;
            }
            i++;
        }
        return i;
    }
    public static int indexlit(String s){
        int c = 0;
        int i=0;
        while(i<litcounter){
            if(lit[i][0].equals(s)){
                c=i;
                break;
            }
            i++;
        }
        return i;
    }
    public static int indexis(String s){
        int i=0;
        while(i<11){
            if(is[i].equals(s)){
                break;
            }
            i++;
        }
        return i;
    }
    public static int indexad(String s){
        int i=0;
        while(i<5){
            if(ad[i].equals(s)){
                break;
            }
            i++;
        }
        return i;
    }
    public static int indexdl(String s){
        int i=0;
        while(i<2){
            if(dl[i].equals(s)){
                break;
            }
            i++;
        }
        return i;
    }
    public static int indexcc(String s){
        int i=0;
        while(i<6){
            if(cc[i].equals(s)){
                break;
            }
            i++;
        }
        return i;
    }

}


















 
INPUT
START 200
        MOVER   AREG , ='5'
        MOVEM   AREG , X
L1      MOVER   BREG , ='2'
        ORIGIN L1+3
        LTORG
NEXT    ADD AREG , ='1'
        SUB BREG , ='2'
        BC  LT , BACK
        LTORG
BACK    EQU L1
        ORIGIN  NEXT+5
        MULT    CREG , ='4'
        STOP
        X DS 1
        END






OUTPUT :-INTERMEDIATE CODE:
(AD,01)(C,200)
(IS,4)(R,1)(L,1)
(IS,5)(R,1)(S,1)
(IS,4)(R,2)(L,2)
(AD,03)(S,2)+3
(AD,05)
(DL,02)(C,5)
(DL,02)(C,2)
(IS,1)(R,1)(L,3)
(IS,2)(R,2)(L,4)
(IS,7)(1)(S,4)
(AD,05)
(DL,02)(C,1)
(DL,02)(C,2)
(AD,03)(S,3)+5
(IS,3)(R,3)(L,5)
(IS,0)
(DL,1)(C,1)
(AD,02)
(DL,02)(C,4)



 
LITERAL TABLE:
='5'	205
='2'	206
='1'	210
='2'	211
='4'	215
SYMBOL TABLE 
X	214
L1	202
NEXT	207
BACK	202
 





EXPERIMENT A2

import java.io.*;
public class assemblerPasstwo {
    public static void main(String[] args) throws Exception {
        BufferedReader inputReader = new BufferedReader(new FileReader("intermediate.txt"));
        BufferedReader symReader = new BufferedReader(new FileReader("SYMTAB.txt"));
        BufferedReader litReader = new BufferedReader(new FileReader("LITTAB.txt"));
        BufferedWriter outputWriter = new BufferedWriter(new FileWriter("machine_code.txt"));

        String inputLine;
        String symLine = null;
        String litLine = null;

        while ((inputLine = inputReader.readLine()) != null) {
            String[] tokens = inputLine.split("\\)\\(");
            StringBuilder outputLine = new StringBuilder();

            for (String token : tokens) {
                token = token.replaceAll("[\\(\\)]", "");

                if (token.startsWith("S,")) {
                    if (symLine == null) {
                        symLine = symReader.readLine();
                    }
                    if (symLine != null) {
                        String[] symTokens = symLine.split("\t");
                        if (symTokens.length > 1) {
                            int address = Integer.parseInt(symTokens[1]);
                            token = token.replace("S,", "");
                            token = getFormattedMachineCode(token, address);
                        }
                    }
                } else if (token.startsWith("L,")) {
                    if (litLine == null) {
                        litLine = litReader.readLine();
                    }
                    if (litLine != null) {
                        String[] litTokens = litLine.split("\t");
                        if (litTokens.length > 1) {
                            int address = Integer.parseInt(litTokens[1]);
                            token = token.replace("L,", "");
                            token = getFormattedMachineCode(token, address);
                        }
                    }
                }

                outputLine.append(token.replace(",", "")).append(" ");
            }
            outputLine = new StringBuilder(outputLine.toString().replaceAll("[A-Za-z]", ""));
            outputWriter.write(outputLine.toString().trim());
            outputWriter.newLine();
        }

        inputReader.close();
        symReader.close();
        litReader.close();
        outputWriter.close();
    }

    private static String getFormattedMachineCode(String instruction, int address) {
        String[] parts = instruction.split(",");
        String opcode = parts[0];
        String[] operands = parts.length > 1 ? parts[1].split(" ") : new String[0];

        String registerNumbers = "";
        for (String operand : operands) {
            int regIndex = Integer.parseInt(operand);
            registerNumbers += getRegisterNumber(regIndex);
        }

        return opcode + " " + registerNumbers + " " + address;
        
    }

    private static String getRegisterNumber(int index) {
        String[] regNumbers = {"01", "02", "03", "04"};
        if (index >= 0 && index < regNumbers.length) {
            return regNumbers[index];
        }
        return "";
    }
}












OUTPUT
04 01 205
05 01 214
04 02 206
00 00 005
00 00 002
01 01 210
02 02 211
07 02 202
00 00 001
00 00 002 
03 03 215
00 00 000
00 00 004









EXPERIMENT A3
import java.io.*;
import java.util.*;

class Pass1 {
    static String mnt[][] = new String[5][3]; // Assuming 5 macros in 1 program
    static String ala[][] = new String[10][2]; // Assuming 2 arguments in each macro
    static String mdt[][] = new String[20][1]; // Assuming 4 LOC for each macro
    static int mntc = 0, mdtc = 0, alac = 0;

    public static void main(String args[]) {
        pass1();
        System.out.println("Macro Name Table(MNT)");
        display(mnt, mntc, 3);
        System.out.println("Argument List Array(ALA) for Pass1");
        display(ala, alac, 2);
        System.out.println("Macro Definition Table(MDT)");
        display(mdt, mdtc, 1);
    }
    static void pass1() {
        int index = 0, i;
        String s, prev = "", substring;
        try {
            BufferedReader inp = new BufferedReader(new FileReader("input.txt"));
            while ((s = inp.readLine()) != null) {
                if (s.equalsIgnoreCase("MACRO")) {
                    prev = s;
                    for (; !(s = inp.readLine()).equalsIgnoreCase("MEND"); mdtc++, prev = s) {
                        if (prev.equalsIgnoreCase("MACRO")) {
                            StringTokenizer st = new StringTokenizer(s);
                            String str[] = new String[st.countTokens()];
                            for (i = 0; i < str.length; i++) {
                                str[i] = st.nextToken();
                            }
                            mnt[mntc][0] = (mntc + 1) + ""; // MNT formation
                            mnt[mntc][1] = str[0];
                            mnt[mntc++][2] = (++mdtc) + "";
                            st = new StringTokenizer(str[1], ","); // Tokenizing the arguments
                            String string[] = new String[st.countTokens()];
                            for (i = 0; i < string.length; i++) {
                                string[i] = st.nextToken();
                                ala[alac][0] = alac + ""; // ALA table formation
                                index = string[i].indexOf("=");
                                if (index != -1) {
                                    ala[alac++][1] = string[i].substring(0, index); 
                                }else {
                                    ala[alac++][1] = string[i];
                                }
                            }
                        } else { // Automatically eliminates tagging of arguments in definition
                            index = s.indexOf("&");
                            substring = s.substring(index);
                            for (i = 0; i < alac; i++) {
                                if (ala[i][1].equals(substring)) {
                                    s = s.replaceAll(substring, "#" + ala[i][0]);
                                }
                            }
                        }
                        mdt[mdtc - 1][0] = s;
                    }
                    mdt[mdtc - 1][0] = s;
                }
            }
        } catch (FileNotFoundException ex) {
            System.out.println("Unable to find file ");

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    static void display(String a[][], int n, int m) {
        int i, j;
        for (i = 0; i < n; i++) {
            for (j = 0; j < m; j++) {
                System.out.print(a[i][j] + " ");
            }
            System.out.println();
        }
    }
}
INPUT
MACRO
ADDITION &arg1,&arg2,&arg3
MOV ax,&arg1
ADD ax,&arg2
ADD ax,&arg3
MEND
ADDITION 34,45,44 
END
OUTPUT
Macro Name Table(MNT)
1 ADDITION 1 
Argument List Array(ALA) for Pass1
0 &arg1 
1 &arg2 
2 &arg3
Macro Definition Table(MDT)
ADDITION &arg1,&arg2,&arg3
MOV ax,#0
ADD ax,#1
ADD ax,#2
MEND




EXPERIMENT A4
import java.io.*;
import java.util.*;
class macroPass2 {
    public static void main(String args[]) {
        pass2();
        System.out.println("Argument List Array(ALA) for Pass2");
        display(Pass1.ala, Pass1.alac, 2);
        System.out.println("Note: All tables are displayed here whereas the expanded output is stored in the file pass2_output.txt");
}
static void pass2() {
        int alap = 0, index, mdtp, flag = 0, i, j;
        String s, temp;
        try {
            BufferedReader inp = new BufferedReader(new FileReader("pass1_output.txt"));
            File op = new File("pass2_output.txt");
            if (!op.exists()) {
                op.createNewFile();
            }
            BufferedWriter output = new BufferedWriter(new FileWriter(op.getAbsoluteFile()));
            for (; (s = inp.readLine()) != null; flag = 0) {
                StringTokenizer st = new StringTokenizer(s);
                String str[] = new String[st.countTokens()];
                for (i = 0; i < str.length; i++) {
                    str[i] = st.nextToken();
                }
                for (j = 0; j < Pass1.mntc; j++) {
                    if (str[0].equals(Pass1.mnt[j][1])) {
                        mdtp = Integer.parseInt(Pass1.mnt[j][2]);

                        st = new StringTokenizer(str[1], ",");
                        String arg[] = new String[st.countTokens()];
                        for (i = 0; i < arg.length; i++) {
                            arg[i] = st.nextToken();
                            Pass1.ala[alap++][1] = arg[i];
                        }
                        for (i = mdtp; !(Pass1.mdt[i][0].equalsIgnoreCase("MEND")); i++) { 
                            // Expand until MEND 
                            index = Pass1.mdt[i][0].indexOf("#");
                            temp = Pass1.mdt[i][0].substring(0, index);
                            temp += Pass1.ala[Integer.parseInt("" + Pass1.mdt[i][0].charAt(index + 1))][1]; 
                            //Convert char->string -> integer & append it
                            output.write(temp);
                            output.newLine();
                        }
                        flag = 1;
                    }
                }
                if (flag == 0) { // When it is not a macro
                    output.write(s);
                    output.newLine();
                }
            }
            output.close();
        } catch (FileNotFoundException ex) {
            System.out.println("Unable to find file ");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    static void display(String a[][], int n, int m) {
        int i, j;
        for (i = 0; i < n; i++) {
            for (j = 0; j < m; j++) {
                System.out.print(a[i][j] + " ");
            }
            System.out.println();
        }
    }
}










 
INPUT:
PRG2 START
USING *,BASE
INCR1 DATA1,DATA2
INCR2 DATA3,DATA4
FOUR DC F'4'
FIVE DC F'5'
BASE EQU 8
TEMP DS 1F
DROP 8
END




Output:
Argument List Array(ALA) for Pass2
0 DATA1
1 DATA2
2 DATA3
3 DATA4
PRG2 START
USING *,BASE
A 1,DATA1
L 2,DATA2
L 3,DATA3
ST 4,DATA4
FOUR DC F'4'
FIVE DC F'5'
BASE EQU 8
TEMP DS 1F
DROP 8
END





